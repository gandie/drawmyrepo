#!/usr/bin/env python
#
# drawmyrepo - draw diagrams from your git repo for fun and statistics
#
# Copyright (c) 2018 Lars Bergmann
#
# GNU GENERAL PUBLIC LICENSE
#    Version 3, 29 June 2007
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# PIP
import matplotlib
from matplotlib import pyplot as plt

# BUILTIN
import argparse
import subprocess
import os
from datetime import datetime


if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-p',
        '--path',
        help='Path to git repo. Default is current workdirectory.',
        type=str,
        default=os.getcwd()
    )

    parser.add_argument(
        '--from-year',
        dest='from_year',
        help='Year to start counting from. Default is 2014.',
        type=int,
        default=2014
    )

    parser.add_argument(
        '--to-year',
        help='Year to stop counting. Default is now.',
        dest='to_year',
        type=int,
        default=datetime.now().year
    )
    args = parser.parse_args()

    # call git to get commit timestamps
    git_log_times = subprocess.check_output(
        ['git', '-C', args.path, 'log', '--format=%at'],
        universal_newlines=True
    )

    # built datetime objects from timestamps
    dates = [
        datetime.fromtimestamp(float(line))
        for line in git_log_times.split('\n') if line
    ]

    # initialize commits (per month)
    years = range(args.from_year, args.to_year + 1)
    months = range(1, 13)
    commits = [
        {
            'year': year,
            'month': month,
            'count': 0
        }
        for year in years for month in months
    ]

    # and count commits
    for date in dates:
        year = date.year
        month = date.month
        for commit_d in commits:
            if year != commit_d['year'] or month != commit_d['month']:
                continue
            commit_d['count'] += 1

    # prepare plot data - lets do some padding, yay!
    x_axis = [
        '\n'.join([
            str(c['year']),
            '0' + str(c['month']) if len(str(c['month'])) == 1 else str(c['month'])
        ])
        for c in commits
    ]

    y_axis = [
        c['count']
        for c in commits
    ]

    # setup drawing machine
    figure, axes = plt.subplots()
    axes.plot(x_axis, y_axis, label=args.path)
    axes.set(xlabel="\n<Year>\n<Month>", ylabel="Number of commits")
    axes.legend()
    axes.grid()
    matplotlib.pyplot.show()
